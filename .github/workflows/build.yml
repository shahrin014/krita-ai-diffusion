name: Publish Docker image

on:
  push:
    branches:
      - test-build
  # release:
  #   types: [published]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Start Runpod instance
        id: start_runpod
        env:
          RUNPOD_API_TOKEN: ${{ secrets.RUNPOD_API_TOKEN }}
        run: |
          GPU_TYPE="NVIDIA GeForce RTX 4070 Ti"
          IMAGE_NAME="runpod/ubuntu:22.04"

        START_RESPONSE=$(curl \
          --request POST \
          --header 'content-type: application/json' \
          --url "https://api.runpod.io/graphql?api_key=$RUNPOD_API_TOKEN" \
          --data-raw $'{
            "operationName":"Mutation",
            "variables":{"input":{"instanceId":"cpu3c-16-32","cloudType":"SECURE","containerDiskInGb":5,"deployCost":0.48,"dataCenterId":null,"networkVolumeId":null,"startJupyter":true,"startSsh":true,"templateId":"runpod-ubuntu","volumeKey":null,"ports":"22/tcp"}},
            "query":"mutation Mutation($input: deployCpuPodInput\u0021) {\\n  deployCpuPod(input: $input) {\\n    id\\n    imageName\\n    env\\n    machineId\\n    machine {\\n      podHostId\\n      __typename\\n    }\\n    __typename\\n  }\\n}"
          }')
          
          INSTANCE_ID=$($START_RESPONSE | jq -r '.data.deployCpuPod.id')
          echo "instanceId=$INSTANCE_ID" >> "$GITHUB_OUTPUT"

      # - name: Wait for Runpod instance to be ready
      #   env:
      #     RUNPOD_API_TOKEN: ${{ secrets.RUNPOD_API_TOKEN }}
      #   run: |
      #     INSTANCE_ID="${{ steps.start_runpod.outputs.instance_id }}"
      #     while true; do
      #       STATUS_RESPONSE=$(curl -s -X GET "https://api.runpod.io/instance/$INSTANCE_ID/status" \
      #         -H "Authorization: Bearer $RUNPOD_API_TOKEN")
      #       STATUS=$(echo $STATUS_RESPONSE | jq -r '.status')
      #       if [ "$STATUS" == "RUNNING" ]; then
      #         echo "Instance is running."
      #         break
      #       else
      #         echo "Waiting for instance to be ready..."
      #         sleep 10
      #       fi
      #     done

      # - name: Get Runpod instance SSH details
      #   id: get_ssh_details
      #   env:
      #     RUNPOD_API_TOKEN: ${{ secrets.RUNPOD_API_TOKEN }}
      #   run: |
      #     INSTANCE_ID="${{ steps.start_runpod.outputs.instance_id }}"
      #     SSH_RESPONSE=$(curl -s -X GET "https://api.runpod.io/instance/$INSTANCE_ID/ssh" \
      #       -H "Authorization: Bearer $RUNPOD_API_TOKEN")
      #     SSH_HOST=$(echo $SSH_RESPONSE | jq -r '.host')
      #     SSH_USER=$(echo $SSH_RESPONSE | jq -r '.user')
      #     SSH_KEY=$(echo $SSH_RESPONSE | jq -r '.key')
      #     echo "$SSH_KEY" > runpod_ssh_key
      #     chmod 600 runpod_ssh_key
      #     echo "::set-output name=ssh_host::$SSH_HOST"
      #     echo "::set-output name=ssh_user::$SSH_USER"

      # - name: SSH and run commands on Runpod instance
      #   env:
      #     REPOSITORY: ${{ github.repository }}
      #     DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      #     DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
      #   run: |
      #     SSH_HOST="${{ steps.get_ssh_details.outputs.ssh_host }}"
      #     SSH_USER="${{ steps.get_ssh_details.outputs.ssh_user }}"
      #     ssh -i runpod_ssh_key -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << EOF
      #       git clone https://github.com/$REPOSITORY.git
      #       cd $(basename "$REPOSITORY")
      #       VERSION=$(python -c "import ai_diffusion; print(ai_diffusion.__version__)")
      #       pip install -r requirements.txt
      #       python scripts/docker.py 
      #       docker build -t $DOCKERHUB_USERNAME/$(basename "$REPOSITORY"):$VERSION scripts/docker
      #       echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
      #       docker push $DOCKERHUB_USERNAME/$(basename "$REPOSITORY"):$VERSION
      #     EOF

      # - name: Terminate Runpod instance
      #   run: |
      #     INSTANCE_ID="${{ steps.start_runpod.outputs.instance_id }}"
      #     RUNPOD_API_TOKEN="YOUR_RUNPOD_API_TOKEN"
      #     curl -s -X POST "https://api.runpod.io/instance/$INSTANCE_ID/terminate" \
      #       -H "Authorization: Bearer $RUNPOD_API_TOKEN" \
      #       -H "Content-Type: application/json"
